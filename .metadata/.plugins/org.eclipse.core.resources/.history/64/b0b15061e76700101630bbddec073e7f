package com.application.chatbot.controller;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.web.client.RestTemplate;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import java.io.IOException;
import java.util.Map;


@RestController
public class VoiceChatController {
    private final RestTemplate restTemplate;
    public VoiceChatController(RestTemplateBuilder builder) {
        this.restTemplate = builder.build();
    }

    @PostMapping("/voice-chat")
    public ResponseEntity<String> voiceChat(@RequestParam("audio") MultipartFile audio) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();

        byte[] audioBytes = audio.getBytes();
        ByteArrayResource resource = new ByteArrayResource(audioBytes) {
            @Override
            public String getFilename() {
                return audio.getOriginalFilename();  // <-- Important!
            }
        };

        body.add("audio", resource);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
        ResponseEntity<Map> sttResponse = restTemplate.postForEntity(
            "http://localhost:5005/transcribe",
            requestEntity,
            Map.class
        );

        String userText = (String) sttResponse.getBody().get("text");

        // 2. Call Ollama Llama2 model locally for response
        String aiUrl = "http://localhost:11434/api/generate";
        String requestBody = String.format("{\"model\":\"llama2\",\"prompt\":\"%s\", \"stream\": false}", userText);
        HttpHeaders aiHeaders = new HttpHeaders();
        aiHeaders.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> aiRequest = new HttpEntity<>(requestBody, aiHeaders);

        ResponseEntity<Map> aiResponse = restTemplate.postForEntity(aiUrl, aiRequest, Map.class);
        String aiText = (String) aiResponse.getBody().get("response");

        return ResponseEntity.ok(aiText);
    }
}
